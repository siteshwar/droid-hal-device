These files are useful for uploading locally-built RPM packages to OBS.

Preconditions:

   droid-hal-$DEVICE built in ../../RPMS/ (or set the INDIR variable)

Usage examples:

   # Package RPMS with full auto-detection
   make

   # Package RPMS for i9305 from ../../RPMS/ to out_i9305/
   make DEVICE=i9305

   # Package RPMS for grouper from /tmp/device/ to /srv/out/ for aarch64
   make DEVICE=grouper ARCH=aarch64 INDIR=/tmp/device OUTDIR=/srv/out/

OBS Project Setup:

   # Create a new sub-project in your home project, and make sure the
   # Meta configuration contains the following two repositories:

    <repository name="latest_armv7hl">
        <path project="mer:qt:devel" repository="latest_armv7hl"/>
        <arch>armv8el</arch>
    </repository>
    <repository name="next_armv7hl">
        <path project="mer:qt:devel" repository="next_armv7hl"/>
        <arch>armv8el</arch>
    </repository>

   # Also put the following items into "Project Config" to make sure
   # OBS prefers the libhybris versions over mesa llvmpipe (in Mer):

    Prefer: libhybris-libGLESv2
    Prefer: libhybris-libGLESv2-devel
    Prefer: libhybris-libEGL
    Prefer: libhybris-libEGL-devel
    Prefer: libhybris-libwayland-egl-devel
    Prefer: libhybris-libwayland-egl

Uploading to OBS:

   # Make sure OSC is configured correctly with https://api.merproject.org
   ...

   # Assuming you'll be uploading to the project home:$USER:hw:$DEVICE and
   # that the package droid-hal-$DEVICE has already been created in OBS
   osc co home:$USER:hw:$DEVICE droid-hal-$DEVICE

   # Copy files into the repo, add and commit
   cd home:$USER:hw:$DEVICE/droid-hal-$DEVICE/
   cp ../../build.script ../../*.rpm ../../*.spec .
   osc add *
   osc ci
